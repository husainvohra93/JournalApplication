package com.example.JournalApplication.scheduler;

import com.example.JournalApplication.cache.AppCache;
import com.example.JournalApplication.entity.JournalEntry;
import com.example.JournalApplication.entity.UserEntity;
import com.example.JournalApplication.enums.Sentiment;
import com.example.JournalApplication.repository.UserRepositoryImpl;
import com.example.JournalApplication.service.EmailService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Component
public class UserScheduler {
    @Autowired
    private EmailService emailService;

    @Autowired
    private UserRepositoryImpl userRepository;

    @Autowired
    private AppCache appCache;

    /* Cron Expression is every week Tuesday 12 : 26 p.m. run this. Such Cron Expression
    can be generated by http://www.cronmaker.com/;jsessionid=node0zj0jo5sjikjjoy5zgll2z1sm355850.node0?0

    Also please @EnableScheduling in JournalApplication.java to note that below function is a scheduler
     */
    @Scheduled(cron = "0 26 12 ? * TUE")
    public void fetUsersAndSendSaMail(){
        List<UserEntity> usersForSA = userRepository.getUsersForSA();

        for (UserEntity user : usersForSA){
            List<JournalEntry> journalEntries = user.getJournalEntries();
            List<Sentiment> sentiments = journalEntries.stream().filter(x->x.getDate().isAfter(LocalDateTime.now().minus(7, ChronoUnit.DAYS))).map(x->x.getSentiment()).collect(Collectors.toList());

            /* --- below code represents which sentiment has occurred maximum number of times*/
            Map<Sentiment,Integer> sentimentCounts = new HashMap<>();
            for (Sentiment sentiment : sentiments){
                if(sentiment!=null)
                    sentimentCounts.put(sentiment,sentimentCounts.getOrDefault(sentiment,0)+1);
            }
            Sentiment mostFrequentSentiment = null;
            int maxCount=0;
            for(Map.Entry<Sentiment,Integer> entry : sentimentCounts.entrySet()){
                if(entry.getValue() > maxCount) {
                    maxCount = entry.getValue();
                    mostFrequentSentiment = entry.getKey();
                }

            }

            if(mostFrequentSentiment != null) {
                emailService.sendEmail(user.getEmail(),"Sentiment for last 7 days is " , mostFrequentSentiment.toString());
            }

            /*--------------------------------------------------*/
        }
    }

    /* Cron Expression is every 5 minutes run this. Such Cron Expression
    can be generated by http://www.cronmaker.com/;jsessionid=node0zj0jo5sjikjjoy5zgll2z1sm355850.node0?0
    Ignore the Last "*" from the cron expression generated

    Also please @EnableScheduling in JournalApplication.java to note that below function is a scheduler
     */
    @Scheduled(cron = "0 0/5 * 1/1 * ?")
    public void clearAppCahe(){
        appCache.init();
    }
}
